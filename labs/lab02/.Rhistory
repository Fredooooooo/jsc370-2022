N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
set.seed(667)
my_data <- read_excel("Dataset for HW1-STA305H1S-W2022.xlsx", sheet=1)
my_data <- my_data %>% tail(-2) %>% select(-Q2)
my_data <- as.data.frame(sapply(my_data, as.numeric))
population1 <- select(my_data, `Population 1`)
population2 <- select(my_data, `Population 2`)
population2 <- head(population2, -1)
glimpse(population1)
glimpse(population2)
boxplot(population1,
main = "Boxplot for population 1",
ylab = "value for random variable Y")
boxplot(population2,
main = "Boxplot for population 2",
ylab = "value for random variable Y")
ggplot(data = population1) +
geom_histogram(mapping = aes(x = `Population 1`))
ggplot(data = population2) +
geom_histogram(mapping = aes(x = `Population 2`))
qqnorm(population1$`Population 1`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population1')
qqline(population1$`Population 1`, col = "steelblue", lwd = 2)
qqnorm(population2$`Population 2`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population2')
qqline(population2$`Population 2`, col = "steelblue", lwd = 2)
yA <- population1[['Population 1']]
yB <- population2[['Population 2']]
observed <- mean(yA) - mean(yB)
pop <- c(yA,yB); N <- choose(15,8)
res <- numeric(N) # store the results
index <-combn(1:15,8) #Generate N treatment assignments
for (i in 1:N)
{res[i] <- mean(pop[index[,i]])-mean(pop[-index[,i]])}
tbar <- mean(res)
pval <- sum(abs(res-tbar)>=abs(observed-tbar))/N
round(pval,5)
N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
set.seed(67)
my_data <- read_excel("Dataset for HW1-STA305H1S-W2022.xlsx", sheet=1)
my_data <- my_data %>% tail(-2) %>% select(-Q2)
my_data <- as.data.frame(sapply(my_data, as.numeric))
population1 <- select(my_data, `Population 1`)
population2 <- select(my_data, `Population 2`)
population2 <- head(population2, -1)
glimpse(population1)
glimpse(population2)
boxplot(population1,
main = "Boxplot for population 1",
ylab = "value for random variable Y")
boxplot(population2,
main = "Boxplot for population 2",
ylab = "value for random variable Y")
ggplot(data = population1) +
geom_histogram(mapping = aes(x = `Population 1`))
ggplot(data = population2) +
geom_histogram(mapping = aes(x = `Population 2`))
qqnorm(population1$`Population 1`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population1')
qqline(population1$`Population 1`, col = "steelblue", lwd = 2)
qqnorm(population2$`Population 2`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population2')
qqline(population2$`Population 2`, col = "steelblue", lwd = 2)
yA <- population1[['Population 1']]
yB <- population2[['Population 2']]
observed <- mean(yA) - mean(yB)
pop <- c(yA,yB); N <- choose(15,8)
res <- numeric(N) # store the results
index <-combn(1:15,8) #Generate N treatment assignments
for (i in 1:N)
{res[i] <- mean(pop[index[,i]])-mean(pop[-index[,i]])}
tbar <- mean(res)
pval <- sum(abs(res-tbar)>=abs(observed-tbar))/N
round(pval,5)
N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
set.seed(67)
my_data <- read_excel("Dataset for HW1-STA305H1S-W2022.xlsx", sheet=1)
my_data <- my_data %>% tail(-2) %>% select(-Q2)
my_data <- as.data.frame(sapply(my_data, as.numeric))
population1 <- select(my_data, `Population 1`)
population2 <- select(my_data, `Population 2`)
population2 <- head(population2, -1)
glimpse(population1)
glimpse(population2)
boxplot(population1,
main = "Boxplot for population 1",
ylab = "value for random variable Y")
boxplot(population2,
main = "Boxplot for population 2",
ylab = "value for random variable Y")
ggplot(data = population1) +
geom_histogram(mapping = aes(x = `Population 1`))
ggplot(data = population2) +
geom_histogram(mapping = aes(x = `Population 2`))
qqnorm(population1$`Population 1`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population1')
qqline(population1$`Population 1`, col = "steelblue", lwd = 2)
qqnorm(population2$`Population 2`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population2')
qqline(population2$`Population 2`, col = "steelblue", lwd = 2)
yA <- population1[['Population 1']]
yB <- population2[['Population 2']]
observed <- mean(yA) - mean(yB)
pop <- c(yA,yB); N <- choose(15,8)
res <- numeric(N) # store the results
index <-combn(1:15,8) #Generate N treatment assignments
for (i in 1:N)
{res[i] <- mean(pop[index[,i]])-mean(pop[-index[,i]])}
tbar <- mean(res)
pval <- sum(abs(res-tbar)>=abs(observed-tbar))/N
round(pval,5)
N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
set.seed(7)
my_data <- read_excel("Dataset for HW1-STA305H1S-W2022.xlsx", sheet=1)
my_data <- my_data %>% tail(-2) %>% select(-Q2)
my_data <- as.data.frame(sapply(my_data, as.numeric))
population1 <- select(my_data, `Population 1`)
population2 <- select(my_data, `Population 2`)
population2 <- head(population2, -1)
glimpse(population1)
glimpse(population2)
boxplot(population1,
main = "Boxplot for population 1",
ylab = "value for random variable Y")
boxplot(population2,
main = "Boxplot for population 2",
ylab = "value for random variable Y")
ggplot(data = population1) +
geom_histogram(mapping = aes(x = `Population 1`))
ggplot(data = population2) +
geom_histogram(mapping = aes(x = `Population 2`))
qqnorm(population1$`Population 1`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population1')
qqline(population1$`Population 1`, col = "steelblue", lwd = 2)
qqnorm(population2$`Population 2`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population2')
qqline(population2$`Population 2`, col = "steelblue", lwd = 2)
yA <- population1[['Population 1']]
yB <- population2[['Population 2']]
observed <- mean(yA) - mean(yB)
pop <- c(yA,yB); N <- choose(15,8)
res <- numeric(N) # store the results
index <-combn(1:15,8) #Generate N treatment assignments
for (i in 1:N)
{res[i] <- mean(pop[index[,i]])-mean(pop[-index[,i]])}
tbar <- mean(res)
pval <- sum(abs(res-tbar)>=abs(observed-tbar))/N
round(pval,5)
N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
set.seed(799)
my_data <- read_excel("Dataset for HW1-STA305H1S-W2022.xlsx", sheet=1)
my_data <- my_data %>% tail(-2) %>% select(-Q2)
my_data <- as.data.frame(sapply(my_data, as.numeric))
population1 <- select(my_data, `Population 1`)
population2 <- select(my_data, `Population 2`)
population2 <- head(population2, -1)
glimpse(population1)
glimpse(population2)
boxplot(population1,
main = "Boxplot for population 1",
ylab = "value for random variable Y")
boxplot(population2,
main = "Boxplot for population 2",
ylab = "value for random variable Y")
ggplot(data = population1) +
geom_histogram(mapping = aes(x = `Population 1`))
ggplot(data = population2) +
geom_histogram(mapping = aes(x = `Population 2`))
qqnorm(population1$`Population 1`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population1')
qqline(population1$`Population 1`, col = "steelblue", lwd = 2)
qqnorm(population2$`Population 2`, pch = 1, frame = FALSE, main = 'Normal Q-Q Plot for Population2')
qqline(population2$`Population 2`, col = "steelblue", lwd = 2)
yA <- population1[['Population 1']]
yB <- population2[['Population 2']]
observed <- mean(yA) - mean(yB)
pop <- c(yA,yB); N <- choose(15,8)
res <- numeric(N) # store the results
index <-combn(1:15,8) #Generate N treatment assignments
for (i in 1:N)
{res[i] <- mean(pop[index[,i]])-mean(pop[-index[,i]])}
tbar <- mean(res)
pval <- sum(abs(res-tbar)>=abs(observed-tbar))/N
round(pval,5)
N <- 5000 # number of times to repeat this process
result <- numeric(N) # space to save random diffs.
for (i in 1:N)
{
index <- sample(15,size=8,replace=F)
result[i] <- mean(pop[index])-mean(pop[-index])
}
#store observed mean difference
observed <- mean(yA)-mean(yB)
tbar <- mean(result)
pval <- (sum(abs(result-tbar)>=abs(observed-tbar))+1)/(N+1)
round(pval,5)
s <- sqrt((7*var(yA)+6*var(yB))/13)
tstar <- (mean(yA)-mean(yB))/(s*sqrt(1/8+1/7)); round(tstar,2)
pval <- 2*pt(tstar,13,lower.tail = FALSE); round(pval,5)
knitr::opts_chunk$set(echo = TRUE)
y1m<- 50; s1sq<- 40; n1<- 8
y2m<- 55; s2sq<- 35; n2<- 11
ts <- (y1m-y2m) / sqrt(s1sq/n1 + s2sq/n2)
pval <- 2*pt(ts,17,lower.tail = FALSE); round(pval,5)
y1m<- 50; s1sq<- 40; n1<- 8
y2m<- 55; s2sq<- 35; n2<- 11
ts <- (y1m-y2m) / sqrt(s1sq/n1 + s2sq/n2)
ts
pval <- 2*pt(ts,17,lower.tail = FALSE); round(pval,5)
y1m<- 50; s1sq<- 40; n1<- 8
y2m<- 55; s2sq<- 35; n2<- 11
ts <- (y2m-y1m) / sqrt(s1sq/n1 + s2sq/n2)
ts
pval <- 2*pt(ts,17,lower.tail = FALSE); round(pval,5)
y1m<- 50; s1sq<- 40; n1<- 8
y2m<- 55; s2sq<- 35; n2<- 11
ts <- (y2m-y1m) / sqrt(s1sq/n1 + s2sq/n2)
pval <- 2*pt(ts,17,lower.tail = FALSE); round(pval,5)
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
deltas
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
deltas[1]
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
for (j in 1:100) {
}
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
df<-NULL
for (i in 1:3) {
for (j in 2:100, by=2) {
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
df<-NULL
for (i in 1:3) {
for (j in 2:100 by=2) {
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
df<-NULL
for (i in 1:3) {
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
}
df
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
df %>% plot(power~size, pch = 19, col = "gray52")
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52")
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52")
lines(lowess(df$size,df$power), col = "blue", lwd = 3)
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52")
lines(df$size,df$power, col = "blue", lwd = 3)
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52", main='power curve for theta = 0.5')
lines(df$size,df$power, col = "blue", lwd = 3)
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52", main=sprintf('power curve for theta = %f', theta[i]))
lines(df$size,df$power, col = "blue", lwd = 3)
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 100, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52", main=sprintf('power curve for theta = %f', theta[i]), xlab='sample size', ylab='power')
lines(df$size,df$power, col = "blue", lwd = 3)
}
sigma = 6; theta = c(0.5, 0.25, 0.1)
deltas = theta * 6
twosampttestpow <- function(alpha,n1,delta,sigma){
t.crit <-qt(1-alpha/2,2.5*n1-2)
t.gamma <- delta/(sigma*sqrt(1/n1+1/(1.5*n1)))
t.power <- 1-pt(t.crit,2.5*n1-2,ncp=t.gamma)+pt(-t.crit,2.5*n1-2,ncp=t.gamma)
return(t.power)
}
# Note that n1 and n2 have to be integers, and n2 = 1.5*n1, therefore, n1 has to be even.
for (i in 1:3) {
df<-NULL
for (j in seq(2, 1000, by=2)) {
delta = deltas[i]
n1 = j
n = 2.5*n1
rbind(df,data.frame(size=n,power=twosampttestpow(0.05, n1, delta, sigma)))->df
}
plot(df$power~df$size, pch = 19, col = "gray52", main=sprintf('power curve for theta = %f', theta[i]), xlab='sample size', ylab='power')
lines(df$size,df$power, col = "blue", lwd = 3)
}
